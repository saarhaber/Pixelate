{"version":3,"sources":["Components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Grid","props","react_default","a","createElement","grid_matrix","map","row","row_index","row_array","cell","column_index","cell_style","borderStyle","backgroundColor","color","height","width","margin","style","onClick","changeColor","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addRow","setState","rows","state","new_row","i","columns","length","prevState","push","console","log","deleteRow","pop","addCol","_loop","x","deleteCol","_loop2","clickedColor","main_div_style","display","flexDirection","justifyContent","alignItems","handleChange","bind","assertThisInitialized","event","defineProperty","target","name","value","_this2","onChange","Components_Grid","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd57c669.chunk.js","sourcesContent":["import React from 'react'\nimport { NONAME } from 'dns';\n\nfunction Grid(props) {\n    return(\n        <div>\n            {\n                props.grid_matrix.map(function(row, row_index) {\n                    return(\n                        <div>\n                            {\n                                row.row_array.map(function(cell, column_index) {\n                                    let cell_style = {\n                                        borderStyle: \"none\",\n                                        backgroundColor: cell.color,\n                                        height: \"30px\",\n                                        width: \"30px\",\n                                        margin: \"2px\"\n                                    }\n                                    return (\n                                        <button \n                                            style={cell_style} \n                                            onClick={\n                                                () => {\n                                                    props.changeColor(row_index, column_index)\n                                                }\n                                            }>\n                                        </button>)\n                                })\n                            }\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\n// OLD GRID COMPONENT\n// function Grid(props) {\n//     let col = props.col;\n//     let row = props.row;\n//     let colarr = [];\n//     let rowarr = [];\n//     let rows;\n//     for( let i = 0; i < col; i++){\n//         colarr[i] = i;\n//     }\n//     for( let x = 0; x < row; x++){\n//         rowarr[x] = x;\n//     }\n//     for( let step = 0; step < row; step++){\n//         let local;\n//         for (let j = 0; j < col; j++) {\n//             local += <button>Click</button>;\n//         }\n//         rows += local;\n//     }\n//     return(\n//         // <div>{colarr.map(function(create) {\n//         //     return <button>TEST</button>\n//         // })}\n//         <div>\n//         {rowarr.map(function(create) {\n//             return <div>\n//             {console.log(col)}\n//             {colarr.map(function(create){\n//                 return <button>TEST</button>\n//             })}\n//             </div>\n//         })}\n//         </div>\n\n//     )\n// }\n\nexport default Grid","import React from 'react';\nimport './App.css';\nimport Grid from './Components/Grid'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      clickedColor: \"red\",\n      columns: 0,\n      rows: 0,\n      grid_matrix: [],\n      main_div_style: {\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addRow = this.addRow.bind(this)\n    this.deleteRow = this.deleteRow.bind(this)\n    this.changeColor = this.changeColor.bind(this)\n  }\n\n  handleChange (event) {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  addRow = () => {\n    this.setState({ \n      rows : this.state.rows + 1\n    })\n\n    let new_row = []\n    for (let i = 0; i < this.state.columns; i++) {\n      new_row[i] = {\n        row_index: this.state.grid_matrix.length,\n        column_index: i,\n        color: \"grey\"\n      }\n    }\n\n    this.setState(prevState => {\n      return (\n        prevState.grid_matrix.push({ row_array: new_row })\n      )\n    })\n    console.log(this.state.grid_matrix)\n  }\n\n  deleteRow = () => {\n    if (this.state.rows > 0) {\n      this.setState({\n        rows: this.state.rows - 1\n      })\n  \n      this.setState(prevState => {\n        return(\n          prevState.grid_matrix.pop()\n        )\n      })\n    }\n  }\n\n  addCol = () => {\n    this.setState({ \n      columns : this.state.columns+1\n    });\n    for (let x = 0; x < this.state.grid_matrix.length; x++){\n      this.setState(prevState => {\n      return(\n      prevState.grid_matrix[x].row_array[this.state.grid_matrix[x].row_array.length] = { \n        row_index: x,\n        column_index: this.state.columns,\n        color: \"grey\"\n      }\n      )\n    })\n    }\n  }\n\n  deleteCol = () => {\n    if (this.state.columns > 0) {\n      this.setState({\n        columns: this.state.columns - 1\n      })\n  \n      for (let x = 0; x < this.state.grid_matrix.length; x++){\n        this.setState(prevState => {\n          return (\n            prevState.grid_matrix[x].row_array.pop()\n          )\n        })\n      }\n    }\n  }\n\n  changeColor(row_index, column_index) {\n    this.setState(prevState => {\n      return (\n        prevState.grid_matrix[row_index].row_array[column_index].color = this.state.clickedColor\n      )\n    })\n  }\n\n  render() {\n    return(\n      <div style={this.state.main_div_style}>\n        <h1>Pixelate</h1>\n        <div>\n          <button onClick ={this.addRow}>Add Row</button>\n          <button onClick={this.deleteRow}>Delete Row</button>\n          <button onClick ={this.addCol}>Add Column</button>\n          <button onClick = {this.deleteCol}>Delete Column</button>\n          <select name=\"clickedColor\" onChange={this.handleChange} value={this.state.clickedColor}>\n            <option value=\"red\" >Red</option>\n            <option value=\"blue\" >Blue</option>\n            <option value=\"black\">Black</option>\n            <option value=\"white\">White</option>\n          </select>\n        </div>\n        <br/>\n        <Grid grid_matrix={this.state.grid_matrix} changeColor={this.changeColor} />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}